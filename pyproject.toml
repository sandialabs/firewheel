[build-system]
requires = ["setuptools>=75.0,<=77.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "firewheel"
dynamic = ["version"]
authors = [
    {name = "FIREWHEEL Developers", email = "firewheel@sandia.gov"},
]
description = "FIREWHEEL is an experiment orchestration tool that assists a user in building, controlling, observing, and analyzing repeatable experiments of distributed network systems at any scale."
readme = "README.rst"
requires-python = ">=3.8"
keywords = [
    "FIREWHEEL",
    "Phenix",
    "Sandia",
    "Emulytics",
    "emulation",
    "distributed systems",
    "emulation",
    "experimentation",
    "minimega",
]
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Telecommunications Industry",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Clustering",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Emulators",
    "Topic :: System :: Networking",
    "Topic :: System :: Operating System",
]
dependencies = [
    "minimega==2.9",
    "ClusterShell<=1.9.3",
    "colorama<=0.4.6",
    "coverage<=7.8.2",
    "grpcio>=1.63.0,<=1.68.1",
    "grpcio-tools>=1.63.0,<=1.68.1",
    "importlib_metadata>=7.0.0,<=8.6.1",
    "Jinja2>=3.1.2,<=3.1.6",
    "netaddr<=1.3.0,>=0.7.0",
    "networkx>=2.3,<=3.4.2",
    "protobuf>=5.0.0,<=5.29.3",
    "pytest<=8.3.5",
    "pytest-cov<=6.0.0",
    "python-dotenv<=1.1.0",
    "PyYAML<=6.0.2",
    "qemu.qmp==0.0.3",
    "requests==2.32.4",
    "rich>=13.6.0,<14.1",
]

[project.optional-dependencies]
mcs = [
    "firewheel-repo-base",
    "firewheel-repo-linux",
    "firewheel-repo-vyos",
]
format = [
    "ruff==0.11.2",
]
docs = [
    "Sphinx>=7.0.0,<=8.2.3",
    "myst-nb<=1.2.0",
    "sphinx-rtd-theme==3.0.2",
    "sphinxcontrib-spelling>=7.0.0,<=8.0.1",
    "sphinx-copybutton==0.5.2",
    "pyenchant==3.2.2",
    "doc8==1.1.2",
    "pip-licenses==5.0.0",
    "sphinx-design==0.6.1",
]
dev = [
    "firewheel[format,docs]",
    "pre-commit",
    "tox~=4.0",
]

[project.urls]  # Optional
homepage = "https://www.sandia.gov/emulytics"
documentation = "https://sandialabs.github.io/firewheel/"
repository = "https://github.com/sandialabs/firewheel/"
issue_tracker = "https://github.com/sandialabs/firewheel/issues"
changelog = "https://sandialabs.github.io/firewheel/developer/changelog.html"

[project.scripts]
firewheel = "firewheel.cli.firewheel_cli:main"
mcg = "firewheel.control.utils.new_model_component:main"
prep_fw_tab_completion = "firewheel.cli.completion.prepare_completion_script:main"
get_fw_tab_completion_script = "firewheel.cli.completion.prepare_completion_script:print_completion_script_path"

[tools.setuptools]
license-files = ["LICENSE", "DISCLAIMER.md", "COPYRIGHT.md", "NOTICE"]

[tool.setuptools.package-data]
# Required for tox documentation building
firewheel = ["firewheel.yaml"]

[tool.setuptools_scm]

[tool.doc8]
# Ignore line length errors. Our preferred format is to have single sentences
# on each line and to use the linewrap feature in a given text editor.
ignore = ["D001"]

[tool.mypy]
strict = true
disallow_any_unimported = true
show_traceback = true
pretty = true
python_version = "3.8"
enable_error_code = ["ignore-without-code", "redundant-expr"]
show_error_code_links = true
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = [
    "firewheel.lib.*",
    "firewheel.tests.conftest",
]
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
  "firewheel.lib.grpc.*",
  "firewheel.lib.discovery.*",
  "firewheel.lib.minimega.api",
  "firewheel.lib.minimega.file_store",
  "firewheel.lib.utilities",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
  "firewheel.control",
  "firewheel.control.utils.*",
  "firewheel.control.dependency_graph",
  "firewheel.control.experiment_graph",
  "firewheel.control.image_store",
  "firewheel.control.model_component",
  "firewheel.control.model_component_dependency_graph",
  "firewheel.control.model_component_exceptions",
  "firewheel.control.model_component_install",
  "firewheel.control.model_component_iterator",
  "firewheel.control.model_component_path_iterator",
  "firewheel.control.model_component_manager",
  "firewheel.control.repository_db",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "firewheel.tests.functional.*",
    "firewheel.tests.unit.*",
    "firewheel.tests.conftest",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = "firewheel.vm_resource_manager.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "firewheel.config.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "firewheel.cli.*"
ignore_errors = true

[tool.pytest.ini_options]
addopts = "--cov=src/ --cov-append --cov-report=term --cov-report=html --cov-fail-under=80"

[tool.coverage.run]
parallel = true
branch = true
source = ["firewheel"]
omit = [
    "*/tests/functional/*",
    "*/tests/conftest.py",
]

[tool.coverage.paths]
source = [
    "src/firewheel",
    ".tox/*/lib/python*/site-packages/firewheel",
]

[tool.coverage.report]
show_missing = true
exclude_also = [
  'if __name__ == .__main__.:',
  # Omit `NotImplemented` code
  'raise NotImplementedError',
]


[tool.ruff]
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"


extend-exclude = [
    "test_*.py",
    "firewheel_grpc_pb2*.py",
    "firewheel_grpc_pb2.pyi"
]

[tool.ruff.lint]
select = [
    "E",        # pycodestyle
    "F",        # pyflakes
    "W",        # pycodestyle
    "B",        # flake8-bugbear
    "I",        # isort
    "N",        # pep8-naming
    "D",        # pydocstyle
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "A",        # flake8-builtins
    "LOG",      # flake8-logging
    "G",        # flake8-logging-format
    "RSE",      # flake8-raise
    "Q",        # flake8-quotes
    "ARG",      # flake8-unused-arguments
    "C4",       # flake8-comprehensions
    "PLC",      # Pylint Convention
    "PLE",      # Pylint Error
    "PLR",      # Pylint Refactor
    "PLW",      # Pylint Warning
    "PERF",     # Perflint
    "DOC",      # pydoclint
    "RUF",      # Ruff-specific rules
    # "RET",      # flake8-return
    # "UP",       # pyupgrade
    # "PTH",      # flake8-use-pathlib
    # "TD",       # flake8-todos
    # "SIM",      # flake8-simplify
    # "DTZ",      # flake8-datetimez
]

# We may want to adhere to D205 and D415 in the future.
ignore = [
    "D100",     # Missing docstring in public module
    "D105",     # Missing docstring in magic method
    "D104",     # Missing docstring in public package
    "D200",     # One-line docstring should fit on one line with quotes
    "D202",     # No blank lines allowed after function docstring
    "D205",     # 1 blank line required between summary line and description
    "D212",     # Multi-line docstring summary should start at the first line
    "D415",     # First line should end with a period, question mark, or exclamation point
    "S403",     # Ignore warnings about importing pickle
    "S301",     # suspicious-pickle-usage
    "S603",     # subprocess-without-shell-equals-true
    "S404",     # Ignore warnings about importing subprocess
    "S311",     # Ignore warnings about using random
    "S608",     # Ignore warning about possible SQL injection. SQL is not used in FIREWHEEL.
    "PLW2901",  # redefined-loop-name
    "RUF100",   # unused-noqa
    "RUF012",   # mutable-class-default
    "PLR0904",  # too-many-public-methods
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0914",  # too-many-locals
    "PLR0915",  # too-many-statements
    "PLR1702",  # too-many-nested-blocks
    "PLR0917",  # too-many-positional-arguments
    "PLR2004",  # magic-value-comparison
    "PLR6301",  # no-self-use
    "DOC502",   # docstring-extraneous-exception -- Has lots of false positives currently
    "PERF203",  # try-except-in-loop
    "PERF401",  # manual-list-comprehension
]
preview = true
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.lint.isort]
length-sort = true
known-first-party = ["firewheel"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bandit]
hardcoded-tmp-directory-extend = ["/scratch"]
