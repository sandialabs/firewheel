###############################
# FIREWHEEL's Continuous Integration
#
# This GitLab CI file enables testing of FIREWHEEL
# on a variety of operating systems and versions of
# Python.
#
###############################

include:
  - local: .gitlab/ci/setup.yml

###############################
# Creating a few defaults and setting up the Pipeline stages.
###############################
default:
  tags:
    - vm

stages:
  - lint
  - test
  - deploy

###############################
# Performance Testings
#
# These anchors create an environment for running a stress-test for FIREWHEEL's
# performance.
#
###############################

performance-ubuntu2204:
  stage: test
  tags:
    - ubuntu2204
  needs: []
  variables:
    BASE_PYTHON: python3.10
  before_script:
    - !reference [.create_venv, before_script]
    - !reference [.install_firewheel, before_script]
    - !reference [.configure_firewheel, before_script]
    - !reference [.install_mcs, before_script]
    - !reference [.provision_mcs, before_script]
  script:
    - pushd /opt/firewheel
    # Enable FW to cache images
    - firewheel experiment --no-install tests.vm_gen:1 minimega.schedules_ready
    # Create a network with a lot of vertices and edges
    - firewheel experiment --no-install --profile tests.vm_gen:10000 tests.connect_all:10 minimega.schedules_ready
    - python -m pip install $PIP_ARGS snakeviz
    - python -m pip install $PIP_ARGS "pywebcopy==7.0.2" lxml_html_clean
    # There are a few flaws with pywebcopy and we need to patch it first
    - |
        sed -i '575i\
                if not url:\
                    self.logger.debug("Invalid URL, re-encoded the resource as [%s]" % (match.group(0)))\
                    return match.group(0)\
                if ans.response is not None and not ans.response.ok:\
                    self.logger.debug("Invalid Response, re-encoded the resource as [%s]" % (match.group(0)))\
                    return match.group(0)' /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py
    - |
        tr -d '\r' < /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py > /tmp/elements.py && mv /tmp/elements.py /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py
    - snakeviz -p 8888 -s firewheel_profile.prof &
    - sleep 5
    - python -m pywebcopy -p --url=http://127.0.0.1:8888/snakeviz/%2Fopt%2Ffirewheel%2Ffirewheel_profile.prof --location=$HOME/$CI_PROJECT_DIR/profile
    - pkill snakeviz
    - popd
  artifacts:
    paths:
      - profile

###############################
# Create Documentation
###############################
docs:
  image: $DOCKER_REGISTRY/python:3.11
  stage: lint
  needs: []
  before_script:
    - !reference [.create_venv, before_script]
    - !reference [.install_firewheel_package, before_script]
    - !reference [.configure_firewheel_docker, before_script]
    - !reference [.install_mcs, before_script]
  script:
    - tox -e dependencies,docs
    - mkdir documentation
    - mv docs/build/html documentation/html
  artifacts:
    expire_in: 3 mos
    paths:
      - documentation
    name: "${CI_PROJECT_NAME}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^documentation.*$/
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - $CI_DOCKER_RUNNER

pages:
  image: $DOCKER_REGISTRY/python:3.11
  before_script:
    - echo "Starting pages."
  stage: deploy
  tags:
    - $CI_DOCKER_RUNNER
  needs:
    - job: docs
      artifacts: true
  script:
    - mv documentation/html public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:
  image: $DOCKER_REGISTRY/python:3.11
  stage: deploy
  before_script:
    - apt-get update && apt-get install -y git git-lfs
    - !reference [.create_venv, before_script]
    - python -m pip install $PIP_ARGS --upgrade wheel setuptools pip build twine
  script:
    - git lfs pull
    - python -m build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  artifacts:
    paths:
      - dist/*.whl
  needs: []
  tags:
    - $CI_DOCKER_RUNNER
  rules:
    - if: '$CI_PIPELINE_SOURCE == "release"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
