###############################
# FIREWHEEL's Continuous Integration
#
# This GitLab CI file enables testing of FIREWHEEL
# on a variety of operating systems and versions of
# Python.
#
# It makes use of !reference tags to save space and enable reusability.
# see: https://docs.gitlab.com/ci/yaml/yaml_optimization/#reference-tags
#
###############################


###############################
# Setting up references to speed up the execution of
# pipeline jobs which do not require each component.
#
# This includes:
# * create_venv_docker: Creating a Python 3.10 virtual environment
# * install_firewheel: Install FIREWHEEL and any dependencies.
# * configure_firewheel: Configure FIREWHEEL for use by the job.
# * install_mcs: Clone the base and linux Model Component repositories.
###############################
.create_venv_docker:
  script:
    - python --version ; pip --version
    - pip install $PIP_ARGS virtualenv
    - virtualenv venv
    - source venv/bin/activate

.install_firewheel_docker:
  script:
    - python -m pip install $PIP_ARGS -U build setuptools pip
    - python -m build
    - python -m pip install -e .[dev]

.install_firewheel:
  script:
    - sudo killall minimega  # Make sure minimega is not running
    - sudo systemctl restart minimega
    - !reference [.install_firewheel_docker, script]


.set_config:
  script:
    - firewheel config set -s system.default_output_dir "$(pwd)/logs"
    - firewheel config set -s cluster.compute $(hostname)
    - firewheel config set -s cluster.control $(hostname)
    - firewheel config set -s discovery.hostname 127.0.0.1
    - firewheel config set -s grpc.hostname 127.0.0.1
    - firewheel config set -s minimega.experiment_interface lo
    - firewheel config set -s minimega.install_dir /opt/minimega
    - firewheel config set -s python.venv $(pwd)/venv
    - firewheel config set -s python.bin python3

.configure_firewheel_docker:
  script:
    - !reference [.set_config, script]
    - firewheel config set -s system.default_group root
    - python ./src/firewheel/lib/grpc/firewheel_grpc_server.py &

.configure_firewheel:
  script:
    - !reference [.set_config, script]
    - firewheel init
    - firewheel sync
    - firewheel restart hard

.install_mcs_docker:
  script:
    - mkdir model_components
    - pip install $PIP_ARGS firewheel-repo-base firewheel-repo-tutorials firewheel-repo-linux firewheel-repo-layer2 firewheel-repo-ntp firewheel-repo-dns firewheel-repo-vyos
    - pushd model_components
    # Skip LFS files, we'll get them from the bin repo. Once open-source is
    # complete, the env var can be removed and this can be pip installed
    - GIT_LFS_SKIP_SMUDGE=1 git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/firewheel/firewheel_repo_utilities.git
    - firewheel repository install firewheel_repo_utilities
    - popd


.install_mcs:
  script:
    - pushd /opt/firewheel/
    - !reference [.install_mcs_docker, script]
    - pushd model_components
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${NTP_BIN_REPO_PATH} /tmp/ntp
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${DNS_BIN_REPO_PATH} /tmp/dns
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${VYOS_BIN_REPO_PATH} /tmp/vyos
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${LINUX_BIN_REPO_PATH} /tmp/linux
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${UTILITIES_BIN_REPO_PATH} /tmp/utilities
    - SITE_PACKAGES=$(python3 -c 'import sysconfig; print(sysconfig.get_path("purelib"))')
    - mv /tmp/ntp/ntp/ntp-trusty-server.tar "$SITE_PACKAGES/firewheel_repo_ntp/ntp/vm_resources/"
    - mv /tmp/dns/dns_objects/vm_resources/bind9_xenial_debs.tgz "$SITE_PACKAGES/firewheel_repo_dns/dns_objects/vm_resources/bind9_xenial_debs.tgz"
    - mv /tmp/vyos/vyos-1.1.8/vyos-1.1.8.qc2.xz "$SITE_PACKAGES/firewheel_repo_vyos/vyos-1.1.8/"
    - mv /tmp/linux/linux/vm_resources/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/linux/vm_resources"
    - mv /tmp/linux/ubuntu/ubuntu/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/ubuntu/vm_resources/debs/"
    - mv /tmp/linux/ubuntu/bionic/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/bionic/images/"
    - mv /tmp/linux/ubuntu/jammy/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/jammy/images/"
    - mv /tmp/linux/ubuntu/jammy/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/jammy/vm_resources/debs/"
    - mv /tmp/linux/ubuntu/trusty/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/trusty/images/"
    - mv /tmp/linux/ubuntu/trusty/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/trusty/vm_resources/debs/"
    - mv /tmp/linux/ubuntu/xenial/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/xenial/images/"
    - pushd /tmp/utilities; cp -r --parents * /opt/firewheel/model_components/firewheel_repo_utilities/; popd;
    - popd
    - popd


###############################
# Creating a few defaults and setting up the Pipeline stages.
###############################
default:
  tags:
    - vm

stages:
  - lint
  - test
  - deploy

###############################
# Functional/Performance Testings
#
# These jobs create an environment for running a stress-test for FIREWHEEL's
# performance or enabling functionality-based tests for various FIREWHEEL
# model components.
#
###############################

functional-test:
  before_script:
    - pushd /opt/firewheel/
    - python3.10 -m venv venv
    - source /opt/firewheel/venv/bin/activate
    - popd
    - !reference [.install_firewheel, script]
    - !reference [.configure_firewheel, script]
    - !reference [.install_mcs, script]
  stage: test
  needs: []
  tags:
    - ubuntu2204
  script:
    - echo "This placeholder enables functional testing of various model components."

performance-ubuntu2204:
  before_script:
    - pushd /opt/firewheel/
    - python3.10 -m venv venv
    - source /opt/firewheel/venv/bin/activate
    - popd
    - !reference [.install_firewheel, script]
    - !reference [.configure_firewheel, script]
    - !reference [.install_mcs, script]
  stage: test
  needs: []
  tags:
    - ubuntu2204
  script:
    - pushd /opt/firewheel
    # Enable FW to cache images
    - firewheel experiment --no-install tests.vm_gen:1 minimega.schedules_ready
    # Create a network with a lot of vertices and edges
    - firewheel experiment --no-install --profile tests.vm_gen:10000 tests.connect_all:10 minimega.schedules_ready
    - python -m pip install $PIP_ARGS snakeviz
    - wget https://gist.githubusercontent.com/MSSandroid/6402e2e99e31633386a312b283839e0d/raw/4890a4ac54c3dae72a634da92f84c2adc7480056/snakeviz_static_html.py -O snakeviz_static_html.py
    - python snakeviz_static_html.py firewheel_profile.prof
    - mv firewheel_profile.html $HOME/$CI_PROJECT_DIR/profile
    - popd
  artifacts:
    paths:
      - profile


###############################
# Create Documentation
###############################
docs:
  image: $DOCKER_REGISTRY/python:3.11
  before_script:
    - !reference [.create_venv_docker, script]
    - !reference [.install_firewheel_docker, script]
    - !reference [.configure_firewheel_docker, script]
    - !reference [.install_mcs_docker, script]
  stage: lint
  needs: []
  script:
    - tox -e dependencies,docs
    - mkdir documentation
    - mv docs/build/html documentation/html
  artifacts:
    expire_in: 3 mos
    paths:
      - documentation
    name: "${CI_PROJECT_NAME}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^documentation.*$/
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - $CI_DOCKER_RUNNER


pages:
  image: $DOCKER_REGISTRY/python:3.11
  before_script:
    - echo "Starting pages."
  stage: deploy
  tags:
    - $CI_DOCKER_RUNNER
  needs:
    - job: docs
      artifacts: true
  script:
    - mv documentation/html public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:
  image: $DOCKER_REGISTRY/python:3.11
  stage: deploy
  before_script:
    - python --version ; pip --version
    - apt-get update && apt-get install -y git git-lfs
    - git lfs install
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python -m pip install $PIP_ARGS --upgrade wheel setuptools pip build twine
  script:
    - git lfs pull
    - python -m build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  artifacts:
    paths:
      - dist/*.whl
  needs: []
  tags:
    - $CI_DOCKER_RUNNER
  rules:
    - if: '$CI_PIPELINE_SOURCE == "release"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
