diff --git a/qga/commands.c b/qga/commands.c
index efc8b90281..4a873f9352 100644
--- a/qga/commands.c
+++ b/qga/commands.c
@@ -32,6 +32,8 @@
  */
 #define GUEST_FILE_READ_COUNT_MAX (48 * MiB)

+G_LOCK_DEFINE(agent_out_err_buf);
+
 /* Note: in some situations, like with the fsfreeze, logging may be
  * temporarilly disabled. if it is necessary that a command be able
  * to log for accounting purposes, check ga_logging_enabled() beforehand,
@@ -175,6 +177,37 @@ GuestExecStatus *qmp_guest_exec_status(int64_t pid, Error **errp)
         finished = finished && atomic_mb_read(&gei->err.closed);
     }

+    // NEW - output on every exec status request
+    if (gei->has_output) {
+        if (gei->out.length > 0) {
+            ges->has_out_data = true;
+            G_LOCK(agent_out_err_buf);
+            ges->out_data = g_base64_encode(gei->out.data, gei->out.length);
+            if (finished) {
+                g_free(gei->out.data);
+            } else {
+                memset(gei->out.data, 0, gei->out.length);
+                gei->out.length = 0;
+            }
+            G_UNLOCK(agent_out_err_buf);
+            ges->has_out_truncated = gei->out.truncated;
+        }
+
+        if (gei->err.length > 0) {
+            ges->has_err_data = true;
+            G_LOCK(agent_out_err_buf);
+            ges->err_data = g_base64_encode(gei->err.data, gei->err.length);
+            if (finished) {
+                g_free(gei->err.data);
+            } else {
+                memset(gei->err.data, 0, gei->err.length);
+                gei->err.length = 0;
+            }
+            G_UNLOCK(agent_out_err_buf);
+            ges->has_err_truncated = gei->err.truncated;
+        }
+    }
+
     ges->exited = finished;
     if (finished) {
         /* Glib has no portable way to parse exit status.
@@ -211,19 +244,6 @@ GuestExecStatus *qmp_guest_exec_status(int64_t pid, Error **errp)
             ges->signal = WTERMSIG(gei->status);
         }
 #endif
-        if (gei->out.length > 0) {
-            ges->has_out_data = true;
-            ges->out_data = g_base64_encode(gei->out.data, gei->out.length);
-            g_free(gei->out.data);
-            ges->has_out_truncated = gei->out.truncated;
-        }
-
-        if (gei->err.length > 0) {
-            ges->has_err_data = true;
-            ges->err_data = g_base64_encode(gei->err.data, gei->err.length);
-            g_free(gei->err.data);
-            ges->has_err_truncated = gei->err.truncated;
-        }

         QTAILQ_REMOVE(&guest_exec_state.processes, gei, next);
         g_free(gei);
@@ -343,6 +363,10 @@ static gboolean guest_exec_output_watch(GIOChannel *ch,
     gsize bytes_read;
     GIOStatus gstatus;

+    // Lock on entry and along each exit path because we want to
+    // keep the buffer and the length updates consistent
+    G_LOCK(agent_out_err_buf);
+
     if (cond == G_IO_HUP || cond == G_IO_ERR) {
         goto close;
     }
@@ -379,9 +403,13 @@ static gboolean guest_exec_output_watch(GIOChannel *ch,

     p->length += bytes_read;

+    G_UNLOCK(agent_out_err_buf);
+
     return true;

 close:
+    G_UNLOCK(agent_out_err_buf);
+
     g_io_channel_shutdown(ch, true, NULL);
     g_io_channel_unref(ch);
     atomic_mb_set(&p->closed, true);
