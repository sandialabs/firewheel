# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from firewheel.lib.grpc import firewheel_grpc_pb2 as firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in firewheel/lib/grpc/firewheel_grpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class FirewheelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/firewheel_grpc.Firewheel/GetInfo',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoResponse.FromString,
                _registered_method=True)
        self.GetVMMappingByUUID = channel.unary_unary(
                '/firewheel_grpc.Firewheel/GetVMMappingByUUID',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                _registered_method=True)
        self.DestroyVMMappingByUUID = channel.unary_unary(
                '/firewheel_grpc.Firewheel/DestroyVMMappingByUUID',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyVMMappingResponse.FromString,
                _registered_method=True)
        self.SetVMTimeByUUID = channel.unary_unary(
                '/firewheel_grpc.Firewheel/SetVMTimeByUUID',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMTimeByUUIDRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                _registered_method=True)
        self.SetVMStateByUUID = channel.unary_unary(
                '/firewheel_grpc.Firewheel/SetVMStateByUUID',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMStateByUUIDRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                _registered_method=True)
        self.SetVMMapping = channel.unary_unary(
                '/firewheel_grpc.Firewheel/SetVMMapping',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                _registered_method=True)
        self.ListVMMappings = channel.unary_stream(
                '/firewheel_grpc.Firewheel/ListVMMappings',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ListVMMappingsRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                _registered_method=True)
        self.CountVMMappingsNotReady = channel.unary_unary(
                '/firewheel_grpc.Firewheel/CountVMMappingsNotReady',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyResponse.FromString,
                _registered_method=True)
        self.DestroyAllVMMappings = channel.unary_unary(
                '/firewheel_grpc.Firewheel/DestroyAllVMMappings',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsResponse.FromString,
                _registered_method=True)
        self.GetExperimentStartTime = channel.unary_unary(
                '/firewheel_grpc.Firewheel/GetExperimentStartTime',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentStartTimeRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.FromString,
                _registered_method=True)
        self.SetExperimentStartTime = channel.unary_unary(
                '/firewheel_grpc.Firewheel/SetExperimentStartTime',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.FromString,
                _registered_method=True)
        self.GetExperimentLaunchTime = channel.unary_unary(
                '/firewheel_grpc.Firewheel/GetExperimentLaunchTime',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentLaunchTimeRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.FromString,
                _registered_method=True)
        self.SetExperimentLaunchTime = channel.unary_unary(
                '/firewheel_grpc.Firewheel/SetExperimentLaunchTime',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.FromString,
                _registered_method=True)
        self.InitializeExperimentStartTime = channel.unary_unary(
                '/firewheel_grpc.Firewheel/InitializeExperimentStartTime',
                request_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeRequest.SerializeToString,
                response_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeResponse.FromString,
                _registered_method=True)


class FirewheelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInfo(self, request, context):
        """Gets the gRPC server info.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVMMappingByUUID(self, request, context):
        """Gets the vm_mapping associated with the given uuid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyVMMappingByUUID(self, request, context):
        """Destroys the vm_mapping associated with the given uuid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVMTimeByUUID(self, request, context):
        """Sets the time for the vm_mapping associated with the given uuid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVMStateByUUID(self, request, context):
        """Sets the state for the vm_mapping associated with the given uuid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVMMapping(self, request, context):
        """Sets the given vm_mapping.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVMMappings(self, request, context):
        """Iterates through all requested vm_mappings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountVMMappingsNotReady(self, request, context):
        """Returns the count of VMs that are not ready.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyAllVMMappings(self, request, context):
        """Destroys all vm_mappings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentStartTime(self, request, context):
        """Gets the experiment start time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExperimentStartTime(self, request, context):
        """Sets the experiment start time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentLaunchTime(self, request, context):
        """Gets the experiment launch time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExperimentLaunchTime(self, request, context):
        """Sets the experiment start time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeExperimentStartTime(self, request, context):
        """Initializes the experiment launch time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FirewheelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoResponse.SerializeToString,
            ),
            'GetVMMappingByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVMMappingByUUID,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            ),
            'DestroyVMMappingByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyVMMappingByUUID,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyVMMappingResponse.SerializeToString,
            ),
            'SetVMTimeByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVMTimeByUUID,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMTimeByUUIDRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            ),
            'SetVMStateByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVMStateByUUID,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMStateByUUIDRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            ),
            'SetVMMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVMMapping,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            ),
            'ListVMMappings': grpc.unary_stream_rpc_method_handler(
                    servicer.ListVMMappings,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ListVMMappingsRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            ),
            'CountVMMappingsNotReady': grpc.unary_unary_rpc_method_handler(
                    servicer.CountVMMappingsNotReady,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyResponse.SerializeToString,
            ),
            'DestroyAllVMMappings': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyAllVMMappings,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsResponse.SerializeToString,
            ),
            'GetExperimentStartTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentStartTime,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentStartTimeRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.SerializeToString,
            ),
            'SetExperimentStartTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExperimentStartTime,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.SerializeToString,
            ),
            'GetExperimentLaunchTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentLaunchTime,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentLaunchTimeRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.SerializeToString,
            ),
            'SetExperimentLaunchTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExperimentLaunchTime,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.SerializeToString,
            ),
            'InitializeExperimentStartTime': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeExperimentStartTime,
                    request_deserializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeRequest.FromString,
                    response_serializer=firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'firewheel_grpc.Firewheel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Firewheel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/GetInfo',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVMMappingByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/GetVMMappingByUUID',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyVMMappingByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/DestroyVMMappingByUUID',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMappingUUID.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyVMMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVMTimeByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/SetVMTimeByUUID',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMTimeByUUIDRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVMStateByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/SetVMStateByUUID',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.SetVMStateByUUIDRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVMMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/SetVMMapping',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVMMappings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/firewheel_grpc.Firewheel/ListVMMappings',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ListVMMappingsRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.VMMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountVMMappingsNotReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/CountVMMappingsNotReady',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.CountVMMappingsNotReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyAllVMMappings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/DestroyAllVMMappings',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.DestroyAllVMMappingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperimentStartTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/GetExperimentStartTime',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentStartTimeRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetExperimentStartTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/SetExperimentStartTime',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentStartTime.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperimentLaunchTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/GetExperimentLaunchTime',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.GetExperimentLaunchTimeRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetExperimentLaunchTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/SetExperimentLaunchTime',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.ExperimentLaunchTime.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitializeExperimentStartTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/firewheel_grpc.Firewheel/InitializeExperimentStartTime',
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeRequest.SerializeToString,
            firewheel_dot_lib_dot_grpc_dot_firewheel__grpc__pb2.InitializeExperimentStartTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
