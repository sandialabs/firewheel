AUTHOR
FIREWHEEL Team
DONE
DESCRIPTION

Generates a table showing the VM Images for a running experiment. The table also
includes the power state of the VMs and the vm_resource state. Images that are the same
and have the same power/vm_resource state are grouped. The count of the various VMs are
provided. Additionally, the total number of scheduled VMs is shown at the bottom
of the table.

Example
+++++++

``firewheel vm mix``

The output will look similar to the below table.::

    +------------------------------------------------+-------------+----------------------+-------+
    |                    VM Image                    | Power State |  VM Resource State   | Count |
    +================================================+=============+======================+=======+
    | ubuntu-16.04.4-server-amd64.qcow2              | RUNNING     | configured           | 4     |
    +------------------------------------------------+-------------+----------------------+-------+
    +------------------------------------------------+-------------+----------------------+-------+
    |                                                |             | Total Scheduled      | 4     |
    +------------------------------------------------+-------------+----------------------+-------+

DONE
RUN LocalPython ON control
#!/usr/bin/env python

import sys
from time import sleep

from rich.live import Live
from rich.console import Console, Group

from firewheel.cli.vm_utils import VMMixTable, ScheduleProgress


def main():
    """Provide the primary update functionality for VM Mix."""
    console = Console()
    mix_table = VMMixTable()
    schedule_progress = ScheduleProgress(console=console)
    negative_time_progress = schedule_progress.add_negative_time_task()

    display_group = Group(mix_table, schedule_progress)
    with Live(display_group, console=console, screen=False, refresh_per_second=10) as live:
        while True:
            display_group.renderables[0] = VMMixTable()
            schedule_progress.update_negative_time_task()
            live.update(display_group)
            sleep(2)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)
DONE
