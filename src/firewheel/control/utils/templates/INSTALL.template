---
#######################################################
# This is a sample install file for {{mc_name}}.
# This Ansible playbook can be used to perform one-time actions
# which help prepare the model component for use.
#
# Common uses of INSTALL files include downloading
# VM Resources from the Internet.
#
# NOTE: When you are creating these files, it is 
# imperative that specific versions of software are
# used. Without being as specific as possible,
# experimental results will **NOT** be repeatable.
# We strongly recommend that any changes to software
# versions are accompanied by a warning and new model
# component version.
#######################################################
- name: Prepare {{mc_name}} model component
  hosts: localhost
  become: yes
  vars:
    install_flag: "{{ '{{' }} playbook_dir {{ '}}' }}/.{{mc_name}}.installed"
    # If there are files that can be cached, the final file name should
    # be added to this list. Then offline users may use a storage mechanism
    # for quick retrieval, rather than downloading from the Internet each time.
    # cached_files:
    #   - source: "repo_name/mc_name/file.gz"
    #     destination: "vm_resources/file.gz"
    #     checksum: "sha256:e0287e6339a4e77232a32725bacc7846216a1638faba62618a524a6613823df5"

  tasks:
    - name: Check if {{mc_name}} is already installed
      ansible.builtin.stat:
        path: "{{ '{{' }} install_flag {{ '}}' }}"
      register: flag_check

    - name: Ensure all cached file destinations exist
      ansible.builtin.stat:
        path: "{{ '{{' }} item.destination {{ '}}' }}"
      register: cached_file_check
      loop: "{{ '{{' }} cached_files {{ '}}' }}"

    - name: Fail if install flag is set and any cached file destination does not exist
      ansible.builtin.fail:
        msg: "The destination {{ '{{' }} item.item.destination {{ '}}' }} does not exist."
      when: flag_check.stat.exists and not item.stat.exists
      loop: "{{ '{{' }} cached_file_check.results {{ '}}' }}"

    # Check if all cached files exist
    - name: Set fact for cached files existence
      ansible.builtin.set_fact:
        cached_files_exist: "{{ '{{' }} cached_file_check.results | selectattr('stat.exists', 'equalto', true) | list | length == cached_files | length {{ '}}' }}"

    # Create installation flag if all cached files exist
    - name: Create installation flag if all cached files exist
      ansible.builtin.file:
        path: "{{ '{{' }} install_flag {{ '}}' }}"
        state: touch
      when: cached_files_exist

    # Exit successfully if there are no issues with cached files
    - name: Exit successfully if there are issues with cached files
      meta: end_play
      when: cached_files_exist

    - name: Download/process files if cache_type is "online"
      when: cache_type == "online"
      block:
        - name: Download example file
          ansible.builtin.get_url:
            url: "http://www.example.com/example.tgz"
            dest: "vm_resources/example.tgz"
            checksum: "sha256:e0287e6339a4e77232a32725bacc7846216a1638faba62618a524a6613823df5"

    - name: Ensure all cached file destinations exist
      ansible.builtin.stat:
        path: "{{ '{{' }} item.destination {{ '}}' }}"
      register: cached_file_check
      loop: "{{ '{{' }} cached_files {{ '}}' }}"

    - name: Fail if install flag is set and any cached file destination does not exist
      ansible.builtin.fail:
        msg: "The destination {{ '{{' }} item.item.destination {{ '}}' }} does not exist."
      when: flag_check.stat.exists and not item.stat.exists

    - name: Create installation flag
      ansible.builtin.file:
        path: "{{ '{{' }} install_flag {{ '}}' }}"
        state: touch
